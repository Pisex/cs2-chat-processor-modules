name: Build AMBuild Plugin

on:
  push:
    paths-ignore:
      - 'README.md'
    branches:
      - main
  pull_request:
    paths-ignore:
      - 'README.md'
    branches:
      - main
  release:
    types:
      - created

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      buildnumber: ${{ steps.buildnumber.outputs.build_number }}

    env:
      HL2SDK_ROOT: "${{ github.workspace }}/external"
      MMS_PATH: "${{ github.workspace }}/external/metamod-source"
      MANIFEST_PATH: "${{ github.workspace }}/external/metamod-source/hl2sdk-manifests"

    steps:
      - name: Generate build number
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{secrets.github_token}}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -qy
          sudo apt-get install -y git clang-10 clang++-10 binutils
          sudo apt-get install -y python3
          python3 -m pip install --upgrade pip importlib-metadata
          python3 -m pip install setuptools==45.2.0
          git clone https://github.com/alliedmodders/ambuild.git
          cd ambuild
          pip install .
          cd ..
          mkdir external
          cd external
          git clone --recursive --branch master --single-branch https://github.com/alliedmodders/metamod-source.git
          git clone --recursive --branch cs2 --single-branch https://github.com/alliedmodders/hl2sdk.git hl2sdk-cs2
          cd ../..
          mkdir samples
          cd samples
          git clone https://github.com/pisex/SchemaEntity.git
          cd ${{ github.workspace }}

      - name: Build plugins
        run: |
          PLUGIN_DIRS=("Admins" "AdminTime" "BlockDB" "Chat" "CheckCheats" "FunCommands" "Hide" "Maps" "Players" "Rcon" "Status" "VoteBKM" "VIP" "VIP_Permissions" "LR")
          for PLUGIN in "${PLUGIN_DIRS[@]}"; do
            cd $PLUGIN
            mkdir -p build
            cd build
            python3 ../configure.py -s cs2 --targets x86_64 --enable-optimize --hl2sdk-manifests=./hl2sdk-manifests --mms_path=$MMS_PATH --hl2sdk-root=$HL2SDK_ROOT
            ambuild
            cd package
            zip -r ${PLUGIN}.zip addons
            mv ${PLUGIN}.zip ${{ github.workspace }}
            cd ${{ github.workspace }}
          done

      - name: Upload archives to artifact
        uses: actions/upload-artifact@v4
        with:
          name: compile
          path: |
            ${{ github.workspace }}/Admins.zip
            ${{ github.workspace }}/AdminTime.zip
            ${{ github.workspace }}/BlockDB.zip
            ${{ github.workspace }}/Chat.zip
            ${{ github.workspace }}/CheckCheats.zip
            ${{ github.workspace }}/FunCommands.zip
            ${{ github.workspace }}/Hide.zip
            ${{ github.workspace }}/Maps.zip
            ${{ github.workspace }}/Players.zip
            ${{ github.workspace }}/Rcon.zip
            ${{ github.workspace }}/Status.zip
            ${{ github.workspace }}/VoteBKM.zip
            ${{ github.workspace }}/VIP.zip
            ${{ github.workspace }}/VIP_Permissions.zip
            ${{ github.workspace }}/LR.zip

  release:
      needs: build
      permissions:
        contents: write
      runs-on: ubuntu-20.04
  
      steps:
        - name: Download build artifact
          uses: actions/download-artifact@v4
          with:
            name: compile
            path: .
  
        - name: List files in directory
          run: ls -la
  
        - name: Find downloaded artifacts
          id: find_artifacts
          run: echo "ARTIFACTS=$(ls *.zip | tr '\n' ',')" >> $GITHUB_ENV
  
        - name: Upload release
          uses: softprops/action-gh-release@v1
          with:
            tag_name: v${{ needs.build.outputs.buildnumber }}
            files: ${{ env.ARTIFACTS }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}